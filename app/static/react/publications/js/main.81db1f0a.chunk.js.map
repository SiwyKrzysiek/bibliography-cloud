{"version":3,"sources":["components/PublicationsList.js","components/Publication.js","components/App.js","serviceWorker.js","index.js"],"names":["withRouter","label","publications","match","className","map","publication","selfLink","links","find","l","rel","deleteLink","key","id","title","to","url","type","href","Publication","useState","editMode","inputClass","htmlFor","name","readOnly","value","min","max","App","props","getCurrentUserLogin","a","async","URL","urls","clientBase","fetch","response","text","login","setState","getActionList","publicationsApi","json","data","actions","getPublications","state","loadingPublications","actionUlr","replace","componentDidMount","componentDidUpdate","render","exact","path","p","params","publicationId","React","Component","Boolean","window","location","hostname","document","getElementById","innerText","filesApi","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"js/main.81db1f0a.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link, withRouter } from 'react-router-dom';\n\nconst PublicationsList = ({ label, publications, match }) => {\n  return (\n    <section className=\"container\">\n      <h2>{label}</h2>\n      <ul className=\"list-group\">\n        {publications.map((publication) => {\n          const selfLink = publication.links.find((l) => l.rel === 'self');\n          const deleteLink = publication.links.find((l) => l.rel === 'delete');\n\n          return (\n            <li key={publication.id} className=\"list-group-item d-inline-flex align-items-center\">\n              <span className=\"flex-grow-1\">{publication.title}</span>\n              <div className=\"buttons\">\n                {selfLink &&\n                  <Link to={`${match.url}/${publication.id}`}>\n                    <button className=\"btn btn-info mr-2\" type=\"button\">\n                      <i className=\"fas fa-info-circle\"></i>\n                      <span className=\"d-none d-sm-inline ml-1\">Szczegóły</span>\n                    </button>\n                  </Link>\n                }\n                {deleteLink &&\n                  <a className=\"btn btn-danger mr-2\" href={deleteLink.href}>\n                    <i className=\"fas fa-trash\"></i>\n                    <span className=\"d-none d-sm-inline ml-1\">Usuń</span>\n                  </a>\n                }\n              </div>\n            </li>\n          );\n        })}\n      </ul>\n    </section>\n  );\n};\n\nPublicationsList.propTypes = {\n  label: PropTypes.string,\n  publications: PropTypes.array.isRequired,\n  match: PropTypes.object.isRequired\n};\n\nexport default withRouter(PublicationsList);","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst Publication = ({ publication }) => {\n  const [editMode, setEditMode] = useState(false);\n  const inputClass = 'form-control' + (!editMode ? ' form-control-plaintext' : '');\n\n  return (\n    <section className=\"container mt-3\">\n      <form>\n        <div className=\"form-group row\">\n          <label className=\"col-sm-2 col-form-label\" htmlFor=\"title\">Tytuł</label>\n          <div className=\"col-sm-10\">\n            <input className={inputClass} name=\"title\" type=\"text\" readOnly={!editMode} value=\"Zalety pracy z drzewami\" />\n          </div>\n        </div>\n\n        <div className=\"form-group row\">\n          <label className=\"col-sm-2 col-form-label\" htmlFor=\"pageCount\">Liczba stron</label>\n          <div className=\"col-sm-10\">\n            <input className={inputClass} readOnly={!editMode} name=\"pageCount\" type=\"number\" min={0} />\n          </div>\n        </div>\n\n        <div className=\"form-group row\">\n          <label className=\"col-sm-2 col-form-label\" htmlFor=\"publicationYear\">Rok wydania</label>\n          <div className=\"col-sm-10\">\n            <input className={inputClass} readOnly={!editMode} name=\"publicationYer\" type=\"number\" min={1500} max={2200} readOnly={true} />\n          </div>\n        </div>\n\n        <div className=\"form-group row\">\n\n        </div>\n      </form>\n    </section>\n  );\n};\n\nPublication.propTypes = {\n  publication: PropTypes.object.isRequired\n};\n\nexport default Publication;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\nimport PublicationsList from './PublicationsList';\nimport Publication from './Publication';\nimport '../styles/App.css';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      login: null,\n      loadingPublications: false,\n      publications: [],\n      actions: {}\n    };\n  }\n\n  getCurrentUserLogin = async () => {\n    let url = new URL('api/login', this.props.urls.clientBase);\n    let response = await fetch(url);\n    let login = await response.text();\n\n    this.setState({ login: login });\n    return login;\n  }\n\n  getActionList = async () => {\n    let response = await fetch(this.props.urls.publicationsApi);\n    let data = await response.json();\n    this.setState({ actions: data['_links'] });\n  }\n\n  getPublications = async () => {\n    if (!this.state.actions['publications.list'])\n      return;\n\n    this.setState({ loadingPublications: true });\n\n    let actionUlr = this.state.actions['publications.list'].href;\n    actionUlr = actionUlr.replace('{user}', this.state.login);\n    let url = new URL(actionUlr, this.props.urls.publicationsApi);\n\n    let response = await fetch(url);\n    let data = await response.json();\n    this.setState({ publications: data, loadingPublications: false });\n  }\n\n  componentDidMount = async () => {\n    await this.getCurrentUserLogin();\n    await this.getActionList();\n\n    this.getPublications();\n  }\n\n  componentDidUpdate = async () => {\n    // this.getPublications();\n  }\n\n  render = () => {\n\n    return (\n      <div className=\"App\">\n        <section className=\"container text-center px-5 intro\">\n          <h1 className=\"mt-2\">Publikacje</h1>\n        </section>\n\n        <Router>\n          <Switch>\n            <Route exact path=\"/publications\">\n              <PublicationsList label=\"Twoje publikacje\" publications={this.state.publications} />\n            </Route>\n\n            <Route path=\"/publications/:publicationId\" render={(props) => {\n              const publication = this.state.publications.find((p) => p.id == props.match.params.publicationId);\n              if (!publication) return <Redirect to=\"/publications\" />;\n              return <Publication publication={publication} />;\n            }}>\n            </Route>\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\n\nApp.propTypes = {\n  urls: PropTypes.exact({\n    clientBase: PropTypes.string.isRequired,\n    filesApi: PropTypes.string.isRequired,\n    publicationsApi: PropTypes.string.isRequired\n  }).isRequired,\n  match: PropTypes.object\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\n// Read URLs injected with Jinja\nconst clientBaseUrl = document.getElementById('app-url').innerText;\nconst filesApiUrl = document.getElementById('file-api-url').innerText;\nconst publicationsApiUrl = document.getElementById('publications-api-url').innerText;\n\nconst urls = {\n    clientBase: clientBaseUrl,\n    filesApi: filesApiUrl,\n    publicationsApi: publicationsApiUrl\n};\n\n\nReactDOM.render(<App urls={urls} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}