{"version":3,"sources":["components/App.js","serviceWorker.js","index.js"],"names":["App","props","state","login","publications","url","URL","this","urls","clientBase","fetch","response","text","setState","json","data","console","log","className","class","React","Component","Boolean","window","location","hostname","match","document","getElementById","innerText","filesApi","publicationsApi","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+QAsDeA,G,kBAhDb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,MAAQ,CACXC,MAAO,KACPC,aAAc,IALC,E,sKAWbC,EAAM,IAAIC,IAAI,YAAaC,KAAKN,MAAMO,KAAKC,Y,mBAC1BC,MAAML,I,cAAvBM,E,0BACcA,EAASC,Q,cAAvBT,E,OAEJI,KAAKM,SAAS,CAAEV,MAAOA,IAGvBE,EAAG,sCAAkCF,EAAlC,iB,oBACcO,MAAML,I,eAAvBM,E,2BACiBA,EAASG,Q,QAAtBC,E,OACJR,KAAKM,SAAS,CAAET,aAAcW,I,iFAM9B,OAFAC,QAAQC,IAAIV,KAAKL,OAGf,yBAAKgB,UAAU,OACb,6BAASC,MAAM,oCACb,wBAAIA,MAAM,QAAV,oBACA,2CACA,qCAAWZ,KAAKL,MAAMC,a,GAlCdiB,IAAMC,YCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXN,IAIMlB,EAAO,CACTC,WALkBkB,SAASC,eAAe,WAAWC,UAMrDC,SALgBH,SAASC,eAAe,gBAAgBC,UAMxDE,gBALuBJ,SAASC,eAAe,wBAAwBC,WAS3EG,IAASC,OAAO,kBAAC,EAAD,CAAKzB,KAAMA,IAAUmB,SAASC,eAAe,SDiHvD,kBAAmBM,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"js/main.a154f1a8.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../styles/App.css';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      login: null,\n      publications: []\n    }\n  }\n\n  async componentDidMount() {\n    // Get user name\n    let url = new URL('api/login', this.props.urls.clientBase);\n    let response = await fetch(url);\n    let login = await response.text();\n\n    this.setState({ login: login });\n\n    //Get publications\n    url = `http://localhost:8090/users/${login}/publications`;\n    response = await fetch(url);\n    let data = await response.json();\n    this.setState({ publications: data });\n  }\n\n  render() {\n    console.log(this.state);\n\n    return (\n      <div className=\"App\">\n        <section class=\"container text-center px-5 intro\">\n          <h1 class=\"mt-5\">Lista publikacji</h1>\n          <p>Publications</p>\n          <p>Login: {this.state.login}</p>\n        </section>\n\n      </div>\n    );\n  }\n}\n\nApp.propTypes = {\n  url: PropTypes.exact({\n    clientBase: PropTypes.string.isRequired,\n    filesApi: PropTypes.string.isRequired,\n    publicationsApi: PropTypes.string.isRequired\n  }).isRequired\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\n// Read URLs injected with Jinja\nconst clientBaseUrl = document.getElementById('app-url').innerText;\nconst filesApiUrl = document.getElementById('file-api-url').innerText;\nconst publicationsApiUrl = document.getElementById('publications-api-url').innerText;\n\nconst urls = {\n    clientBase: clientBaseUrl,\n    filesApi: filesApiUrl,\n    publicationsApi: publicationsApiUrl\n};\n\n\nReactDOM.render(<App urls={urls} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}