{"version":3,"sources":["components/PublicationsList.js","components/Publication.js","components/App.js","serviceWorker.js","index.js"],"names":["withRouter","label","publications","match","className","map","publication","selfLink","links","find","l","rel","deleteLink","key","id","title","to","url","type","href","history","refreshPublications","orginalPublication","useState","editMode","setEditMode","currentPublication","setCurrentPublication","inputClass","htmlFor","name","readOnly","value","onChange","e","target","min","pageCount","max","publicationYear","onClick","a","async","fetch","method","headers","body","JSON","stringify","push","App","props","getCurrentUserLogin","URL","urls","clientBase","response","text","login","setState","getActionList","publicationsApi","json","data","actions","getPublications","state","loadingPublications","actionUlr","replace","componentDidMount","render","path","home","isExact","style","width","flexGrow","exact","p","params","publicationId","globalState","React","Component","Boolean","window","location","hostname","document","getElementById","innerText","filesApi","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"js/main.d4c33a02.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link, withRouter } from 'react-router-dom';\n\nconst PublicationsList = ({ label, publications, match }) => {\n  return (\n    <section className=\"container\">\n      <h2>{label}</h2>\n      <ul className=\"list-group\">\n        {publications.map((publication) => {\n          const selfLink = publication.links.find((l) => l.rel === 'self');\n          const deleteLink = publication.links.find((l) => l.rel === 'delete');\n\n          return (\n            <li key={publication.id} className=\"list-group-item d-inline-flex align-items-center\">\n              <span className=\"flex-grow-1\">{publication.title}</span>\n              <div className=\"buttons\">\n                {selfLink &&\n                  <Link to={`${match.url}/${publication.id}`}>\n                    <button className=\"btn btn-info mr-2\" type=\"button\">\n                      <i className=\"fas fa-info-circle\"></i>\n                      <span className=\"d-none d-sm-inline ml-1\">Szczegóły</span>\n                    </button>\n                  </Link>\n                }\n                {deleteLink &&\n                  <a className=\"btn btn-danger mr-2\" href={deleteLink.href}>\n                    <i className=\"fas fa-trash\"></i>\n                    <span className=\"d-none d-sm-inline ml-1\">Usuń</span>\n                  </a>\n                }\n              </div>\n            </li>\n          );\n        })}\n      </ul>\n    </section>\n  );\n};\n\nPublicationsList.propTypes = {\n  label: PropTypes.string,\n  publications: PropTypes.array.isRequired,\n  match: PropTypes.object.isRequired\n};\n\nexport default withRouter(PublicationsList);","import React, { useState } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst Publication = ({ publication, history, refreshPublications }) => {\n  const orginalPublication = publication;\n  const [editMode, setEditMode] = useState(false);\n  const [currentPublication, setCurrentPublication] = useState(orginalPublication);\n  const inputClass = 'form-control' + (!editMode ? ' form-control-plaintext' : '');\n\n  const saveChanges = async () => {\n    let selfLink = currentPublication.links.find((l) => l.rel === 'self');\n    await fetch(selfLink.href, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(currentPublication),\n    });\n\n    refreshPublications();\n    history.push('/publications');\n  };\n\n  return (\n    <section className=\"container mt-3\">\n      <form>\n        <div className=\"form-group row\">\n          <label className=\"col-sm-2 col-form-label\" htmlFor=\"title\">Tytuł</label>\n          <div className=\"col-sm-10\">\n            <input className={inputClass} name=\"title\" type=\"text\" readOnly={!editMode}\n              value={currentPublication.title}\n              onChange={\n                (e) => { setCurrentPublication({ ...currentPublication, title: e.target.value }); }\n              }\n            />\n          </div>\n        </div>\n\n        <div className=\"form-group row\">\n          <label className=\"col-sm-2 col-form-label\" htmlFor=\"pageCount\">Liczba stron</label>\n          <div className=\"col-sm-10\">\n            <input className={inputClass} readOnly={!editMode} name=\"pageCount\" type=\"number\" min={0}\n              value={currentPublication.pageCount}\n              onChange={\n                (e) => { setCurrentPublication({ ...currentPublication, pageCount: e.target.value }); }\n              }\n            />\n          </div>\n        </div>\n\n        <div className=\"form-group row\">\n          <label className=\"col-sm-2 col-form-label\" htmlFor=\"publicationYear\">Rok wydania</label>\n          <div className=\"col-sm-10\">\n            <input className={inputClass} readOnly={!editMode} name=\"publicationYer\" type=\"number\"\n              min={1200} max={2200} value={currentPublication.publicationYear}\n              onChange={\n                (e) => { setCurrentPublication({ ...currentPublication, publicationYear: e.target.value }); }\n              }\n            />\n          </div>\n        </div>\n\n        <hr />\n\n        <div className=\"form-group d-flex justify-content-end\">\n          {editMode &&\n            <>\n              <button className=\"btn btn-success\" type=\"button\" onClick={saveChanges}>Zapisz</button>\n              <button className=\"btn btn-danger ml-2\" type=\"button\"\n                onClick={() => { setCurrentPublication(orginalPublication); setEditMode(false); }}>\n                Anuluj zmiany\n              </button>\n            </>\n          }\n\n          {!editMode &&\n            <button className=\"btn btn-primary\" type=\"button\" onClick={() => setEditMode(true)}>\n              Edytuj\n            </button>\n          }\n        </div>\n      </form>\n    </section>\n  );\n};\n\nPublication.propTypes = {\n  publication: PropTypes.object.isRequired,\n  history: PropTypes.object.isRequired,\n  refreshPublications: PropTypes.func\n};\n\nexport default withRouter(Publication);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { BrowserRouter as Router, Switch, Route, Redirect, Link } from 'react-router-dom';\nimport PublicationsList from './PublicationsList';\nimport Publication from './Publication';\nimport '../styles/App.css';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      login: null,\n      loadingPublications: false,\n      publications: [],\n      actions: {},\n      urls: props.urls\n    };\n  }\n\n  getCurrentUserLogin = async () => {\n    let url = new URL('api/login', this.props.urls.clientBase);\n    let response = await fetch(url);\n    let login = await response.text();\n\n    this.setState({ login: login });\n    return login;\n  }\n\n  getActionList = async () => {\n    let response = await fetch(this.props.urls.publicationsApi);\n    let data = await response.json();\n    this.setState({ actions: data['_links'] });\n  }\n\n  getPublications = async () => {\n    if (!this.state.actions['publications.list'])\n      return;\n\n    this.setState({ loadingPublications: true });\n\n    let actionUlr = this.state.actions['publications.list'].href;\n    actionUlr = actionUlr.replace('{user}', this.state.login);\n    let url = new URL(actionUlr, this.props.urls.publicationsApi);\n\n    let response = await fetch(url);\n    let data = await response.json();\n    this.setState({ publications: data, loadingPublications: false });\n  }\n\n  componentDidMount = async () => {\n    await this.getCurrentUserLogin();\n    await this.getActionList();\n\n    this.getPublications();\n  }\n\n  render = () => {\n\n    return (\n      <div className=\"App\">\n\n        <Router>\n          <Route path=\"/publications\" render={(props) => {\n            const home = props.match.isExact;\n\n            return (\n              <section className=\"container intro d-flex\">\n                {!home &&\n                  <Link to=\"/publications\">\n                    <button className=\"btn btn-warning h-100\" style={{ width: '6.5ch' }}>\n                      <i className=\"fas fa-chevron-left\"></i>\n                    </button>\n                  </Link>\n                }\n                <h1 className=\"mt-2 text-center\" style={{ flexGrow: 1 }}>Publikacje</h1>\n              </section>\n            );\n          }} />\n\n          <Switch>\n            <Route exact path=\"/publications\">\n              <PublicationsList label=\"Twoje publikacje\" publications={this.state.publications} />\n            </Route>\n\n            <Route path=\"/publications/:publicationId\" render={(props) => {\n              const publication = this.state.publications.find((p) => p.id == props.match.params.publicationId);\n              if (!publication) return <Redirect to=\"/publications\" />;\n              return <Publication publication={publication} refreshPublications={this.getPublications} globalState={this.state} />;\n            }}>\n            </Route>\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\n\nApp.propTypes = {\n  urls: PropTypes.exact({\n    clientBase: PropTypes.string.isRequired,\n    filesApi: PropTypes.string.isRequired,\n    publicationsApi: PropTypes.string.isRequired\n  }).isRequired,\n  match: PropTypes.object\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\n// Read URLs injected with Jinja\nconst clientBaseUrl = document.getElementById('app-url').innerText;\nconst filesApiUrl = document.getElementById('file-api-url').innerText;\nconst publicationsApiUrl = document.getElementById('publications-api-url').innerText;\n\nconst urls = {\n    clientBase: clientBaseUrl,\n    filesApi: filesApiUrl,\n    publicationsApi: publicationsApiUrl\n};\n\n\nReactDOM.render(<App urls={urls} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}