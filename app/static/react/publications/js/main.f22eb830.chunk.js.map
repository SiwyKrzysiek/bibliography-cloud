{"version":3,"sources":["components/PublicationsList.js","components/Publication.js","components/App.js","serviceWorker.js","index.js"],"names":["withRouter","label","publications","match","refreshPublications","globalState","className","map","publication","selfLink","links","find","l","rel","deleteLink","key","id","title","to","url","type","onClick","a","async","urls","clientBase","URL","searchParams","set","fetch","href","method","createMode","history","owner","login","pageCount","publicationYear","attachments","shareList","orginalPublication","useState","editMode","setEditMode","currentPublication","setCurrentPublication","toAttachList","setToAttachList","localIdList","setLocalIdList","inputClass","attachLink","validatePublication","length","htmlFor","name","readOnly","value","onChange","e","target","min","max","attachment","downloadLink","detachLink","replace","fileName","filter","isMulti","selectedOptions","o","options","attachedFileNames","userFileNames","userFiles","f","includes","prepareAttachmentsOptions","classNamePrefix","curretnlyTakenId","Math","push","userName","concat","disabled","data-tip","data-for","alert","headers","body","JSON","stringify","ok","baseUrl","publicationsApi","actions","App","props","getActionList","response","json","data","setState","getCurrentUserLogin","text","getPublications","state","loadingPublications","actionUlr","getUserFiles","token","filesApi","componentDidMount","stream","EventSource","addEventListener","event","render","path","home","isExact","style","width","flexGrow","exact","p","params","publicationId","React","Component","Boolean","window","location","hostname","document","getElementById","innerText","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"js/main.f22eb830.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link, withRouter } from 'react-router-dom';\n\nconst PublicationsList = ({ label, publications, match, refreshPublications, globalState }) => {\n  return (\n    <section className=\"container\">\n      <h2>{label}</h2>\n      <ul className=\"list-group\">\n        {publications.map((publication) => {\n          const selfLink = publication.links.find((l) => l.rel === 'self');\n          const deleteLink = publication.links.find((l) => l.rel === 'delete');\n\n          const deletePublication = async () => {\n            // Send SSE\n            let url = globalState.urls.clientBase + '/api/publicationMessage';\n            url = new URL(url);\n            url.searchParams.set('publication', publication.title);\n            url.searchParams.set('action', 'deleted');\n            fetch(url);\n\n            await fetch(deleteLink.href, {\n              method: 'DELETE',\n            });\n            refreshPublications();\n          };\n\n          return (\n            <li key={publication.id} className=\"list-group-item d-inline-flex align-items-center\">\n              <span className=\"flex-grow-1\">{publication.title}</span>\n              <div className=\"buttons\">\n                {selfLink &&\n                  <Link to={`${match.url}/${publication.id}`}>\n                    <button className=\"btn btn-info mr-2\" type=\"button\">\n                      <i className=\"fas fa-info-circle\"></i>\n                      <span className=\"d-none d-sm-inline ml-1\">Szczegóły</span>\n                    </button>\n                  </Link>\n                }\n                {deleteLink &&\n                  <button className=\"btn btn-danger mr-2\" onClick={deletePublication}>\n                    <i className=\"fas fa-trash\"></i>\n                    <span className=\"d-none d-sm-inline ml-1\">Usuń</span>\n                  </button>\n                }\n              </div>\n            </li>\n          );\n        })}\n      </ul>\n    </section>\n  );\n};\n\nPublicationsList.propTypes = {\n  label: PropTypes.string,\n  publications: PropTypes.array.isRequired,\n  match: PropTypes.object.isRequired,\n  refreshPublications: PropTypes.func\n};\n\nexport default withRouter(PublicationsList);","import React, { useState } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport Select from 'react-select';\nimport ReactTooltip from 'react-tooltip';\nimport PropTypes from 'prop-types';\n\nconst Publication = ({ createMode, publication, history, refreshPublications, globalState }) => {\n  if (createMode) {\n    publication = {\n      owner: globalState.login,\n      title: '',\n      pageCount: null,\n      publicationYear: null,\n      attachments: [],\n      shareList: [],\n      links: []\n    };\n  }\n\n  const orginalPublication = publication;\n\n  const [editMode, setEditMode] = useState(createMode ? true : false);\n  const [currentPublication, setCurrentPublication] = useState(orginalPublication);\n  const [toAttachList, setToAttachList] = useState([]);\n  const [localIdList, setLocalIdList] = useState([]);\n  const inputClass = 'form-control' + (!editMode ? ' form-control-plaintext' : '');\n  const attachLink = currentPublication.links.find((l) => l.rel === \"attachFile\");\n\n  // console.log(currentPublication);\n\n\n  const validatePublication = (publication) => {\n    return (\n      publication.title.length > 0 &&\n      publication.pageCount > 0 &&\n      publication.publicationYear > 0\n    );\n  };\n\n  const saveChanges = async () => {\n    if (!validatePublication(currentPublication)) {\n      alert('Niepoprawne dane');\n      return;\n    }\n\n    const publication = { ...currentPublication };\n    publication.attachments = publication.attachments.map(a => { // Clear local id\n      if (!localIdList.includes(a.id)) return a;\n      else return {\n        userName: a.userName,\n        fileName: a.fileName\n      };\n    });\n\n    let selfLink = currentPublication.links.find((l) => l.rel === 'self');\n    const response = await fetch(selfLink.href, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(publication),\n    });\n\n    if (!response.ok) {\n      alert('Nie udało się zapisać zmian');\n      return;\n    }\n\n    // Send SSE\n    let url = globalState.urls.clientBase + '/api/publicationMessage';\n    url = new URL(url);\n    url.searchParams.set('publication', publication.title);\n    url.searchParams.set('action', 'changed');\n    fetch(url);\n\n    refreshPublications();\n    history.push('/publications');\n  };\n\n  const createPublication = async () => {\n    if (!validatePublication(currentPublication)) {\n      alert('Niepoprawne dane');\n      return;\n    }\n\n    const baseUrl = globalState.urls.publicationsApi;\n    let url = baseUrl + globalState.actions['publication.create'].href;\n    url = url.replace('{user}', globalState.login);\n\n    const publication = { ...currentPublication };\n    if (editMode) // Clear attachment id\n      publication.attachments = publication.attachments.map(a => ({\n        userName: a.userName,\n        fileName: a.fileName\n      }));\n\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(publication),\n    });\n\n    if (!response.ok) {\n      alert('Nie udało się utworzyć publikacji');\n      return;\n    }\n\n    // Send SSE\n    url = globalState.urls.clientBase + '/api/publicationMessage';\n    url = new URL(url);\n    url.searchParams.set('publication', publication.title);\n    url.searchParams.set('action', 'created');\n    fetch(url);\n\n    refreshPublications();\n    history.push('/publications');\n  };\n\n  const detachFile = async (id) => {\n    setCurrentPublication({\n      ...currentPublication,\n      attachments: currentPublication.attachments.filter((a) => a.id !== id)\n    });\n  };\n\n  const attachFiles = async () => {\n    const attachments = [];\n    const curretnlyTakenId = [...localIdList]; // Cant use state because it updates async\n    for (const fileName of toAttachList) {\n      const id = Math.max(...currentPublication.attachments.map((a) => a.id), ...curretnlyTakenId) + 1;\n      curretnlyTakenId.push(id);\n      attachments.push({\n        id: id,\n        userName: globalState.login,\n        fileName: fileName,\n        links: [{ rel: 'detach', href: 'NotYetSaved' }]\n      });\n    }\n    setLocalIdList(curretnlyTakenId);\n\n    setCurrentPublication({\n      ...currentPublication,\n      attachments: currentPublication.attachments.concat(attachments)\n    });\n\n    setToAttachList([]);\n  };\n\n  const prepareAttachmentsOptions = () => {\n    const attachedFileNames = currentPublication.attachments.map((a) => a.fileName);\n    let userFileNames = globalState.userFiles.map((f) => f.fileName);\n    userFileNames = userFileNames.filter((f) => (!attachedFileNames.includes(f)));\n\n    return userFileNames.map((f) => ({ value: f, label: f }));\n  };\n\n  return (\n    <section className=\"container mt-3\">\n      <form>\n        <div className=\"form-group row\">\n          <label className=\"col-sm-2 col-form-label\" htmlFor=\"title\">Tytuł</label>\n          <div className=\"col-sm-10\">\n            <input className={inputClass} name=\"title\" type=\"text\" readOnly={!editMode}\n              value={currentPublication.title}\n              onChange={\n                (e) => { setCurrentPublication({ ...currentPublication, title: e.target.value }); }\n              }\n            />\n          </div>\n        </div>\n\n        <div className=\"form-group row\">\n          <label className=\"col-sm-2 col-form-label\" htmlFor=\"pageCount\">Liczba stron</label>\n          <div className=\"col-sm-10\">\n            <input className={inputClass} readOnly={!editMode} name=\"pageCount\" type=\"number\" min={0}\n              value={currentPublication.pageCount}\n              onChange={\n                (e) => { setCurrentPublication({ ...currentPublication, pageCount: e.target.value }); }\n              }\n            />\n          </div>\n        </div>\n\n        <div className=\"form-group row\">\n          <label className=\"col-sm-2 col-form-label\" htmlFor=\"publicationYear\">Rok wydania</label>\n          <div className=\"col-sm-10\">\n            <input className={inputClass} readOnly={!editMode} name=\"publicationYer\" type=\"number\"\n              min={1200} max={2200} value={currentPublication.publicationYear}\n              onChange={\n                (e) => { setCurrentPublication({ ...currentPublication, publicationYear: e.target.value }); }\n              }\n            />\n          </div>\n        </div>\n\n        <div className=\"form-group\">\n          <label className=\"font-weight-bolder\">Załączone pliki</label>\n          <ul className=\"list-group\">\n            {currentPublication.attachments.map((attachment) => {\n              const downloadLink = attachment.links.find((l) => l.rel === 'download');\n              const detachLink = attachment.links.find((l) => l.rel === 'detach');\n\n              if (downloadLink) { // Fill in template url\n                downloadLink.href = downloadLink.href\n                  .replace('{appBaseUrl}', globalState.urls.clientBase)\n                  .replace('{fileName}', attachment.fileName);\n              }\n\n              return (\n                <li key={attachment.id} className=\"list-group-item d-inline-flex align-items-center\">\n                  <span className=\"flex-grow-1\">{attachment.fileName}</span>\n                  <div className=\"buttons\">\n                    {downloadLink &&\n                      <a href={downloadLink.href} className=\"btn btn-primary mr-2\" type=\"button\">\n                        <i className=\"fas fa-cloud-download-alt\"></i>\n                        <span className=\"d-none d-sm-inline ml-1\">Pobierz</span>\n                      </a>\n                    }\n                    {detachLink && editMode &&\n                      <button onClick={() => detachFile(attachment.id)} className=\"btn btn-warning mr-2\" type=\"button\">\n                        <i className=\"fas fa-unlink\"></i>\n                        <span className=\"d-none d-sm-inline ml-1\">Odłącz</span>\n                      </button>\n                    }\n                  </div>\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n\n        {editMode && (attachLink || createMode) &&\n          <div className=\"form-group \">\n            <label htmlFor=\"attachments\">Dołącz pliki</label>\n            <div className=\"d-flex\">\n              <Select\n                isMulti\n                value={toAttachList.map((a) => ({ value: a, label: a }))}\n                name=\"attachments\"\n                onChange={(selectedOptions) => setToAttachList(selectedOptions.map((o) => o.value))}\n                options={prepareAttachmentsOptions()}\n                className=\"basic-multi-select flex-grow-1 mr-2\"\n                classNamePrefix=\"select\"\n              />\n              <button onClick={attachFiles} disabled={toAttachList.length === 0} className=\"btn btn-success\" type=\"button\">\n                <i className=\"fas fa-link\"></i>\n                <span className=\"d-none d-sm-inline ml-1\">Dołącz</span>\n              </button>\n            </div>\n          </div>\n        }\n\n        <hr />\n\n        <div className=\"form-group d-flex justify-content-end\">\n          {editMode && !createMode &&\n            <>\n              <span className=\"d-inline-block\" data-tip data-for=\"save-button\">\n                <button className=\"btn btn-success\" type=\"button\" disabled={!validatePublication(currentPublication)} onClick={saveChanges}>\n                  Zapisz\n                </button>\n                {!validatePublication(currentPublication) &&\n                  <ReactTooltip id='save-button' type='error'>\n                    <span>Nieprawidłowe dane publikacji</span>\n                  </ReactTooltip>\n                }\n              </span>\n\n              <button className=\"btn btn-danger ml-2\" type=\"button\"\n                onClick={() => { setCurrentPublication(orginalPublication); setToAttachList([]); setEditMode(false); }}>\n                Anuluj zmiany\n              </button>\n            </>\n          }\n\n          {!editMode &&\n            <button className=\"btn btn-info\" type=\"button\" onClick={() => setEditMode(true)}>\n              Edytuj\n            </button>\n          }\n\n          {createMode &&\n            <>\n              <span className=\"d-inline-block\" data-tip data-for=\"create-button\">\n                <button className=\"btn btn-success\" type=\"button\" disabled={!validatePublication(currentPublication)} onClick={createPublication}>\n                  Utwórz pulikację\n                </button>\n              </span>\n              {!validatePublication(currentPublication) &&\n                <ReactTooltip id='create-button' type='error'>\n                  <span>Nieprawidłowe dane publikacji</span>\n                </ReactTooltip>\n              }\n            </>\n          }\n        </div>\n      </form>\n    </section >\n  );\n};\n\nPublication.propTypes = {\n  createMode: PropTypes.bool,\n  publication: PropTypes.object,\n  history: PropTypes.object.isRequired,\n  refreshPublications: PropTypes.func.isRequired,\n  globalState: PropTypes.object\n};\n\nexport default withRouter(Publication);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { BrowserRouter as Router, Switch, Route, Redirect, Link } from 'react-router-dom';\nimport PublicationsList from './PublicationsList';\nimport Publication from './Publication';\nimport '../styles/App.css';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      login: null,\n      loadingPublications: false,\n      publications: [],\n      userFiles: [],\n      actions: {},\n      urls: props.urls\n    };\n  }\n\n  getActionList = async () => {\n    let response = await fetch(this.props.urls.publicationsApi);\n    let data = await response.json();\n    this.setState({ actions: data['_links'] });\n  }\n\n  getCurrentUserLogin = async () => {\n    let url = new URL('api/login', this.props.urls.clientBase);\n    let response = await fetch(url);\n    let login = await response.text();\n\n    this.setState({ login: login });\n    return login;\n  }\n\n  getPublications = async () => {\n    if (!this.state.actions['publications.list'])\n      return;\n\n    this.setState({ loadingPublications: true });\n\n    let actionUlr = this.state.actions['publications.list'].href;\n    actionUlr = actionUlr.replace('{user}', this.state.login);\n    let url = new URL(actionUlr, this.props.urls.publicationsApi);\n\n    let response = await fetch(url);\n    let data = await response.json();\n    this.setState({ publications: data, loadingPublications: false });\n  }\n\n  getUserFiles = async () => {\n    let url = new URL('api/jwt/listFiles', this.props.urls.clientBase);\n    let response = await fetch(url);\n    let data = await response.json();\n    let token = data.token;\n\n    url = new URL('/files', this.props.urls.filesApi);\n    url.searchParams.set('user', this.state.login);\n    url.searchParams.set('token', token);\n\n    response = await fetch(url);\n    data = await response.json();\n\n    if (!response.ok) {\n      alert('Nie udało się pobrać listy Twoich plików');\n      return;\n    }\n\n    this.setState({ userFiles: data });\n  }\n\n  componentDidMount = async () => {\n    await this.getCurrentUserLogin();\n    await this.getActionList();\n\n    this.getPublications();\n    this.getUserFiles();\n\n    // console.log('Stream time!');\n    this.stream = new EventSource(this.props.urls.clientBase + '/stream');\n    this.stream.addEventListener(`user:${this.state.login}`, (event) => {\n      this.getPublications();\n      // Notification display moved to base template\n    });\n  }\n\n  render = () => {\n\n    return (\n      <div className=\"App\">\n\n        <Router>\n          <Route path=\"/publications\" render={(props) => {\n            const home = props.match.isExact;\n            // this.refreshPublications();\n\n            return (\n              <section className=\"container intro d-flex\">\n                {!home &&\n                  <Link to=\"/publications\" onClick={this.getPublications}>\n                    <button className=\"btn btn-warning h-100\" style={{ width: '6.5ch' }}>\n                      <i className=\"fas fa-chevron-left\"></i>\n                    </button>\n                  </Link>\n                }\n                <h1 className=\"mt-2 text-center\" style={{ flexGrow: 1 }}>Publikacje</h1>\n              </section>\n            );\n          }} />\n\n          <Switch>\n            <Route exact path=\"/publications\">\n              <PublicationsList label=\"Twoje publikacje\" publications={this.state.publications}\n                refreshPublications={this.getPublications} globalState={this.state}\n              />\n              <section className=\"container\">\n                <hr />\n                {this.state.actions['publication.create'] && // Add create button only when there is action\n                  <Link to=\"/publications/create\">\n                    <button type='button' className=\"btn btn-primary\">Nowa publikacja</button>\n                  </Link>\n                }\n              </section>\n            </Route>\n\n            <Route path=\"/publications/create\">\n              {/* <p>Create publication</p> */}\n              <Publication createMode={true} refreshPublications={this.getPublications} globalState={this.state} />\n            </Route>\n\n            <Route path=\"/publications/:publicationId\" render={(props) => {\n              const publication = this.state.publications.find((p) => p.id == props.match.params.publicationId);\n              if (!publication) return <Redirect to=\"/publications\" />;\n              return <Publication publication={publication} refreshPublications={this.getPublications} globalState={this.state} />;\n            }}>\n            </Route>\n\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\n\nApp.propTypes = {\n  urls: PropTypes.exact({\n    clientBase: PropTypes.string.isRequired,\n    filesApi: PropTypes.string.isRequired,\n    publicationsApi: PropTypes.string.isRequired\n  }).isRequired,\n  match: PropTypes.object\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\n// Read URLs injected with Jinja\nconst clientBaseUrl = document.getElementById('app-url').innerText;\nconst filesApiUrl = document.getElementById('file-api-url').innerText;\nconst publicationsApiUrl = document.getElementById('publications-api-url').innerText;\n\nconst urls = {\n    clientBase: clientBaseUrl,\n    filesApi: filesApiUrl,\n    publicationsApi: publicationsApiUrl\n};\n\n\nReactDOM.render(<App urls={urls} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}