{"version":3,"sources":["components/PublicationsList.js","components/Publication.js","components/App.js","serviceWorker.js","index.js"],"names":["withRouter","label","publications","match","refreshPublications","className","map","publication","selfLink","links","find","l","rel","deleteLink","key","id","title","to","url","type","onClick","a","async","fetch","href","method","createMode","history","globalState","owner","login","pageCount","publicationYear","attachments","shareList","orginalPublication","console","log","useState","editMode","setEditMode","currentPublication","setCurrentPublication","inputClass","validatePublication","length","htmlFor","name","readOnly","value","onChange","e","target","min","max","attachment","downloadLink","detachLink","fileName","ok","alert","filter","detachFile","isMulti","options","attachedFileNames","userFileNames","userFiles","f","includes","prepareAttachmentsOptions","classNamePrefix","headers","body","JSON","stringify","push","baseUrl","urls","publicationsApi","actions","replace","App","props","getActionList","response","json","data","setState","getCurrentUserLogin","URL","clientBase","text","getPublications","state","loadingPublications","actionUlr","getUserFiles","token","filesApi","searchParams","set","componentDidMount","render","path","home","isExact","style","width","flexGrow","exact","p","params","publicationId","React","Component","Boolean","window","location","hostname","document","getElementById","innerText","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"js/main.5de3a15d.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link, withRouter } from 'react-router-dom';\n\nconst PublicationsList = ({ label, publications, match, refreshPublications }) => {\n  return (\n    <section className=\"container\">\n      <h2>{label}</h2>\n      <ul className=\"list-group\">\n        {publications.map((publication) => {\n          const selfLink = publication.links.find((l) => l.rel === 'self');\n          const deleteLink = publication.links.find((l) => l.rel === 'delete');\n\n          const deletePublication = async () => {\n            await fetch(deleteLink.href, {\n              method: 'DELETE',\n            });\n            refreshPublications();\n          };\n\n          return (\n            <li key={publication.id} className=\"list-group-item d-inline-flex align-items-center\">\n              <span className=\"flex-grow-1\">{publication.title}</span>\n              <div className=\"buttons\">\n                {selfLink &&\n                  <Link to={`${match.url}/${publication.id}`}>\n                    <button className=\"btn btn-info mr-2\" type=\"button\">\n                      <i className=\"fas fa-info-circle\"></i>\n                      <span className=\"d-none d-sm-inline ml-1\">Szczegóły</span>\n                    </button>\n                  </Link>\n                }\n                {deleteLink &&\n                  <button className=\"btn btn-danger mr-2\" onClick={deletePublication}>\n                    <i className=\"fas fa-trash\"></i>\n                    <span className=\"d-none d-sm-inline ml-1\">Usuń</span>\n                  </button>\n                }\n              </div>\n            </li>\n          );\n        })}\n      </ul>\n    </section>\n  );\n};\n\nPublicationsList.propTypes = {\n  label: PropTypes.string,\n  publications: PropTypes.array.isRequired,\n  match: PropTypes.object.isRequired,\n  refreshPublications: PropTypes.func\n};\n\nexport default withRouter(PublicationsList);","import React, { useState } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport Select from 'react-select';\nimport PropTypes from 'prop-types';\n\nconst Publication = ({ createMode, publication, history, refreshPublications, globalState }) => {\n  if (createMode) {\n    publication = {\n      owner: globalState.login,\n      title: '',\n      pageCount: null,\n      publicationYear: null,\n      attachments: [],\n      shareList: []\n    };\n  }\n\n  const orginalPublication = publication;\n  console.log(orginalPublication);\n\n  const [editMode, setEditMode] = useState(createMode ? true : false);\n  const [currentPublication, setCurrentPublication] = useState(orginalPublication);\n  const inputClass = 'form-control' + (!editMode ? ' form-control-plaintext' : '');\n\n  const validatePublication = (publication) => {\n    return (\n      publication.title.length > 0 &&\n      publication.pageCount > 0 &&\n      publication.publicationYear > 0\n    );\n  };\n\n  const saveChanges = async () => {\n    if (!validatePublication(currentPublication)) {\n      alert('Niepoprawne dane');\n      return;\n    }\n\n    let selfLink = currentPublication.links.find((l) => l.rel === 'self');\n    const response = await fetch(selfLink.href, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(currentPublication),\n    });\n\n    if (!response.ok) {\n      alert('Nie udało się zapisać zmian');\n      return;\n    }\n\n    refreshPublications();\n    history.push('/publications');\n  };\n\n  const createPublication = async () => {\n    if (!validatePublication(currentPublication)) {\n      alert('Niepoprawne dane');\n      return;\n    }\n\n    const baseUrl = globalState.urls.publicationsApi;\n    let url = baseUrl + globalState.actions['publication.create'].href;\n    url = url.replace('{user}', globalState.login);\n\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(currentPublication),\n    });\n\n    if (!response.ok) {\n      alert('Nie udało się utworzyć publikacji');\n      return;\n    }\n\n    refreshPublications();\n    history.push('/publications');\n  };\n\n  const detachFile = async (id) => {\n    const attachment = currentPublication.attachments.find((a) => a.id === id);\n    const url = attachment.links.find((l) => l.rel === 'detach').href;\n\n    const response = await fetch(url, { method: 'DELETE' });\n    if (!response.ok) {\n      alert('Nie udało się odłączyć pliku');\n      return;\n    }\n\n    setCurrentPublication({\n      ...currentPublication,\n      attachments: currentPublication.attachments.filter((a) => a.id !== id)\n    });\n    refreshPublications();\n  };\n\n  const prepareAttachmentsOptions = () => {\n    const attachedFileNames = currentPublication.attachments.map((a) => a.fileName);\n    let userFileNames = globalState.userFiles.map((f) => f.fileName);\n    userFileNames = userFileNames.filter((f) => (!attachedFileNames.includes(f)));\n    // console.log('attachedFileNames', attachedFileNames);\n    // console.log('After filter', userFileNames);\n\n    return userFileNames.map((f) => ({ value: f, label: f }));\n  };\n\n  return (\n    <section className=\"container mt-3\">\n      <form>\n        <div className=\"form-group row\">\n          <label className=\"col-sm-2 col-form-label\" htmlFor=\"title\">Tytuł</label>\n          <div className=\"col-sm-10\">\n            <input className={inputClass} name=\"title\" type=\"text\" readOnly={!editMode}\n              value={currentPublication.title}\n              onChange={\n                (e) => { setCurrentPublication({ ...currentPublication, title: e.target.value }); }\n              }\n            />\n          </div>\n        </div>\n\n        <div className=\"form-group row\">\n          <label className=\"col-sm-2 col-form-label\" htmlFor=\"pageCount\">Liczba stron</label>\n          <div className=\"col-sm-10\">\n            <input className={inputClass} readOnly={!editMode} name=\"pageCount\" type=\"number\" min={0}\n              value={currentPublication.pageCount}\n              onChange={\n                (e) => { setCurrentPublication({ ...currentPublication, pageCount: e.target.value }); }\n              }\n            />\n          </div>\n        </div>\n\n        <div className=\"form-group row\">\n          <label className=\"col-sm-2 col-form-label\" htmlFor=\"publicationYear\">Rok wydania</label>\n          <div className=\"col-sm-10\">\n            <input className={inputClass} readOnly={!editMode} name=\"publicationYer\" type=\"number\"\n              min={1200} max={2200} value={currentPublication.publicationYear}\n              onChange={\n                (e) => { setCurrentPublication({ ...currentPublication, publicationYear: e.target.value }); }\n              }\n            />\n          </div>\n        </div>\n\n        <div className=\"form-group\">\n          <label className=\"font-weight-bolder\">Załączone pliki</label>\n          <ul className=\"list-group\">\n            {currentPublication.attachments.map((attachment) => {\n              const downloadLink = attachment.links.find((l) => l.rel === 'download');\n              const detachLink = attachment.links.find((l) => l.rel === 'detach');\n\n              return (\n                <li key={attachment.id} className=\"list-group-item d-inline-flex align-items-center\">\n                  <span className=\"flex-grow-1\">{attachment.fileName}</span>\n                  <div className=\"buttons\">\n                    {downloadLink &&\n                      <a href={downloadLink.href} className=\"btn btn-primary mr-2\" type=\"button\">\n                        <i className=\"fas fa-cloud-download-alt\"></i>\n                        <span className=\"d-none d-sm-inline ml-1\">Pobierz</span>\n                      </a>\n                    }\n                    {detachLink && editMode &&\n                      <button onClick={() => detachFile(attachment.id)} className=\"btn btn-warning mr-2\" type=\"button\">\n                        <i className=\"fas fa-unlink\"></i>\n                        <span className=\"d-none d-sm-inline ml-1\">Odłącz</span>\n                      </button>\n                    }\n                  </div>\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n\n        {editMode &&\n          <div className=\"form-group \">\n            <label htmlFor=\"attachments\">Dołącz pliki</label>\n            <div className=\"d-flex\">\n              <Select\n                isMulti\n                name=\"attachments\"\n                options={prepareAttachmentsOptions()}\n                className=\"basic-multi-select flex-grow-1 mr-2\"\n                classNamePrefix=\"select\"\n              />\n              <button onClick={() => alert('Not implemented')} className=\"btn btn-success\" type=\"button\">\n                <i className=\"fas fa-link\"></i>\n                <span className=\"d-none d-sm-inline ml-1\">Dołącz</span>\n              </button>\n            </div>\n          </div>\n        }\n\n\n        <hr />\n\n        <div className=\"form-group d-flex justify-content-end\">\n          {editMode && !createMode &&\n            <>\n              <button className=\"btn btn-success\" type=\"button\" onClick={saveChanges}>Zapisz</button>\n              <button className=\"btn btn-danger ml-2\" type=\"button\"\n                onClick={() => { setCurrentPublication(orginalPublication); setEditMode(false); }}>\n                Anuluj zmiany\n              </button>\n            </>\n          }\n\n          {!editMode &&\n            <button className=\"btn btn-primary\" type=\"button\" onClick={() => setEditMode(true)}>\n              Edytuj\n            </button>\n          }\n\n          {createMode &&\n            <button className=\"btn btn-success\" type=\"button\" onClick={createPublication}>Utwórz pulikację</button>\n          }\n        </div>\n      </form>\n    </section>\n  );\n};\n\nPublication.propTypes = {\n  createMode: PropTypes.bool,\n  publication: PropTypes.object,\n  history: PropTypes.object.isRequired,\n  refreshPublications: PropTypes.func.isRequired,\n  globalState: PropTypes.object\n};\n\nexport default withRouter(Publication);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { BrowserRouter as Router, Switch, Route, Redirect, Link } from 'react-router-dom';\nimport PublicationsList from './PublicationsList';\nimport Publication from './Publication';\nimport '../styles/App.css';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      login: null,\n      loadingPublications: false,\n      publications: [],\n      userFiles: [],\n      actions: {},\n      urls: props.urls\n    };\n  }\n\n  getActionList = async () => {\n    let response = await fetch(this.props.urls.publicationsApi);\n    let data = await response.json();\n    this.setState({ actions: data['_links'] });\n  }\n\n  getCurrentUserLogin = async () => {\n    let url = new URL('api/login', this.props.urls.clientBase);\n    let response = await fetch(url);\n    let login = await response.text();\n\n    this.setState({ login: login });\n    return login;\n  }\n\n  getPublications = async () => {\n    if (!this.state.actions['publications.list'])\n      return;\n\n    this.setState({ loadingPublications: true });\n\n    let actionUlr = this.state.actions['publications.list'].href;\n    actionUlr = actionUlr.replace('{user}', this.state.login);\n    let url = new URL(actionUlr, this.props.urls.publicationsApi);\n\n    let response = await fetch(url);\n    let data = await response.json();\n    this.setState({ publications: data, loadingPublications: false });\n  }\n\n  getUserFiles = async () => {\n    let url = new URL('api/jwt/listFiles', this.props.urls.clientBase);\n    let response = await fetch(url);\n    let data = await response.json();\n    let token = data.token;\n\n    url = new URL('/files', this.props.urls.filesApi);\n    url.searchParams.set('user', this.state.login);\n    url.searchParams.set('token', token);\n\n    response = await fetch(url);\n    data = await response.json();\n\n    if (!response.ok) {\n      alert('Nie udało się pobrać listy Twoich plików');\n      return;\n    }\n\n    this.setState({ userFiles: data });\n  }\n\n  componentDidMount = async () => {\n    await this.getCurrentUserLogin();\n    await this.getActionList();\n\n    this.getPublications();\n    this.getUserFiles();\n  }\n\n  render = () => {\n\n    return (\n      <div className=\"App\">\n\n        <Router>\n          <Route path=\"/publications\" render={(props) => {\n            const home = props.match.isExact;\n            // this.refreshPublications();\n\n            return (\n              <section className=\"container intro d-flex\">\n                {!home &&\n                  <Link to=\"/publications\" onClick={this.getPublications}>\n                    <button className=\"btn btn-warning h-100\" style={{ width: '6.5ch' }}>\n                      <i className=\"fas fa-chevron-left\"></i>\n                    </button>\n                  </Link>\n                }\n                <h1 className=\"mt-2 text-center\" style={{ flexGrow: 1 }}>Publikacje</h1>\n              </section>\n            );\n          }} />\n\n          <Switch>\n            <Route exact path=\"/publications\">\n              <PublicationsList label=\"Twoje publikacje\" publications={this.state.publications}\n                refreshPublications={this.getPublications}\n              />\n              <section className=\"container\">\n                <hr />\n                {this.state.actions['publication.create'] && // Add create button only when there is action\n                  <Link to=\"/publications/create\">\n                    <button type='button' className=\"btn btn-primary\">Nowa publikacja</button>\n                  </Link>\n                }\n              </section>\n            </Route>\n\n            <Route path=\"/publications/create\">\n              {/* <p>Create publication</p> */}\n              <Publication createMode={true} refreshPublications={this.getPublications} globalState={this.state} />\n            </Route>\n\n            <Route path=\"/publications/:publicationId\" render={(props) => {\n              const publication = this.state.publications.find((p) => p.id == props.match.params.publicationId);\n              if (!publication) return <Redirect to=\"/publications\" />;\n              return <Publication publication={publication} refreshPublications={this.getPublications} globalState={this.state} />;\n            }}>\n            </Route>\n\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\n\nApp.propTypes = {\n  urls: PropTypes.exact({\n    clientBase: PropTypes.string.isRequired,\n    filesApi: PropTypes.string.isRequired,\n    publicationsApi: PropTypes.string.isRequired\n  }).isRequired,\n  match: PropTypes.object\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\n// Read URLs injected with Jinja\nconst clientBaseUrl = document.getElementById('app-url').innerText;\nconst filesApiUrl = document.getElementById('file-api-url').innerText;\nconst publicationsApiUrl = document.getElementById('publications-api-url').innerText;\n\nconst urls = {\n    clientBase: clientBaseUrl,\n    filesApi: filesApiUrl,\n    publicationsApi: publicationsApiUrl\n};\n\n\nReactDOM.render(<App urls={urls} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}